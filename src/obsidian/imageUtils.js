import { __awaiter } from "tslib";
import { base64ToArrayBuffer } from "obsidian";
const writeImageToFile = (app, imageBuffer, imagePath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const fileAdapter = app.vault.adapter; // Get the current file adapter
        // TODO : bind to settings attachments path or fallback to settings.imagePath
        // Write the array buffer to the vault
        yield fileAdapter.writeBinary(imagePath, new Uint8Array(imageBuffer));
        console.log("Image saved successfully.");
    }
    catch (error) {
        console.error("Error saving the image:", error);
    }
});
// const base64ToArrayBuffer = (base64: string): ArrayBuffer => {
// 	const binaryString: string = window.atob(base64);
// 	const len: number = binaryString.length;
// 	const bytes: Uint8Array = new Uint8Array(len);
// 	for (let i = 0; i < len; i++) {
// 		bytes[i] = binaryString.charCodeAt(i);
// 	}
// 	return bytes.buffer;
// };
export const saveBase64Image = (app, imagePath, base64Image) => __awaiter(void 0, void 0, void 0, function* () {
    // Remove 'data:image/png;base64,' if present
    const base64Data = base64Image.split(",")[1] || base64Image;
    // Convert base64 to array buffer
    const imageBuffer = base64ToArrayBuffer(base64Data);
    // Save to file
    yield writeImageToFile(app, imageBuffer, imagePath);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImltYWdlVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBTyxtQkFBbUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdwRCxNQUFNLGdCQUFnQixHQUFHLENBQ3hCLEdBQVEsRUFDUixXQUF3QixFQUN4QixTQUFpQixFQUNELEVBQUU7SUFDbEIsSUFBSTtRQUNILE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsK0JBQStCO1FBQ3RFLDZFQUE2RTtRQUU3RSxzQ0FBc0M7UUFDdEMsTUFBTSxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUN6QztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNoRDtBQUNGLENBQUMsQ0FBQSxDQUFDO0FBRUYsaUVBQWlFO0FBQ2pFLHFEQUFxRDtBQUNyRCw0Q0FBNEM7QUFDNUMsa0RBQWtEO0FBQ2xELG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0MsS0FBSztBQUNMLHdCQUF3QjtBQUN4QixLQUFLO0FBRUwsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzlCLEdBQVEsRUFDUixTQUFpQixFQUNqQixXQUFtQixFQUNILEVBQUU7SUFDbEIsNkNBQTZDO0lBQzdDLE1BQU0sVUFBVSxHQUFXLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDO0lBRXBFLGlDQUFpQztJQUNqQyxNQUFNLFdBQVcsR0FBZ0IsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFakUsZUFBZTtJQUNmLE1BQU0sZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgYmFzZTY0VG9BcnJheUJ1ZmZlciB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgQXVnbWVudGVkQ2FudmFzU2V0dGluZ3MgfSBmcm9tIFwic3JjL3NldHRpbmdzL0F1Z21lbnRlZENhbnZhc1NldHRpbmdzXCI7XG5cbmNvbnN0IHdyaXRlSW1hZ2VUb0ZpbGUgPSBhc3luYyAoXG5cdGFwcDogQXBwLFxuXHRpbWFnZUJ1ZmZlcjogQXJyYXlCdWZmZXIsXG5cdGltYWdlUGF0aDogc3RyaW5nXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0dHJ5IHtcblx0XHRjb25zdCBmaWxlQWRhcHRlciA9IGFwcC52YXVsdC5hZGFwdGVyOyAvLyBHZXQgdGhlIGN1cnJlbnQgZmlsZSBhZGFwdGVyXG5cdFx0Ly8gVE9ETyA6IGJpbmQgdG8gc2V0dGluZ3MgYXR0YWNobWVudHMgcGF0aCBvciBmYWxsYmFjayB0byBzZXR0aW5ncy5pbWFnZVBhdGhcblxuXHRcdC8vIFdyaXRlIHRoZSBhcnJheSBidWZmZXIgdG8gdGhlIHZhdWx0XG5cdFx0YXdhaXQgZmlsZUFkYXB0ZXIud3JpdGVCaW5hcnkoaW1hZ2VQYXRoLCBuZXcgVWludDhBcnJheShpbWFnZUJ1ZmZlcikpO1xuXHRcdGNvbnNvbGUubG9nKFwiSW1hZ2Ugc2F2ZWQgc3VjY2Vzc2Z1bGx5LlwiKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHRoZSBpbWFnZTpcIiwgZXJyb3IpO1xuXHR9XG59O1xuXG4vLyBjb25zdCBiYXNlNjRUb0FycmF5QnVmZmVyID0gKGJhc2U2NDogc3RyaW5nKTogQXJyYXlCdWZmZXIgPT4ge1xuLy8gXHRjb25zdCBiaW5hcnlTdHJpbmc6IHN0cmluZyA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4vLyBcdGNvbnN0IGxlbjogbnVtYmVyID0gYmluYXJ5U3RyaW5nLmxlbmd0aDtcbi8vIFx0Y29uc3QgYnl0ZXM6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShsZW4pO1xuLy8gXHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4vLyBcdFx0Ynl0ZXNbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcbi8vIFx0fVxuLy8gXHRyZXR1cm4gYnl0ZXMuYnVmZmVyO1xuLy8gfTtcblxuZXhwb3J0IGNvbnN0IHNhdmVCYXNlNjRJbWFnZSA9IGFzeW5jIChcblx0YXBwOiBBcHAsXG5cdGltYWdlUGF0aDogc3RyaW5nLFxuXHRiYXNlNjRJbWFnZTogc3RyaW5nXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0Ly8gUmVtb3ZlICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyBpZiBwcmVzZW50XG5cdGNvbnN0IGJhc2U2NERhdGE6IHN0cmluZyA9IGJhc2U2NEltYWdlLnNwbGl0KFwiLFwiKVsxXSB8fCBiYXNlNjRJbWFnZTtcblxuXHQvLyBDb252ZXJ0IGJhc2U2NCB0byBhcnJheSBidWZmZXJcblx0Y29uc3QgaW1hZ2VCdWZmZXI6IEFycmF5QnVmZmVyID0gYmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjREYXRhKTtcblxuXHQvLyBTYXZlIHRvIGZpbGVcblx0YXdhaXQgd3JpdGVJbWFnZVRvRmlsZShhcHAsIGltYWdlQnVmZmVyLCBpbWFnZVBhdGgpO1xufTtcbiJdfQ==