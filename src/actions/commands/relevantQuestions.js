import { __awaiter } from "tslib";
import { Notice } from "obsidian";
import { getFilesContent } from "../../obsidian/fileUtil";
import { getResponse } from "../../utils/chatgpt";
import { createCanvasGroup } from "../../utils";
const RELEVANT_QUESTION_SYSTEM_PROMPT = `
There must be 6 questions.

You must respond in this JSON format: {
	"questions": The questions
}

You must respond in the language the user used.
`.trim();
export const handleAddRelevantQuestions = (app, settings) => __awaiter(void 0, void 0, void 0, function* () {
    new Notice("Generating relevant questions...");
    const files = yield app.vault.getMarkdownFiles();
    const sortedFiles = files.sort((a, b) => b.stat.mtime - a.stat.mtime);
    const actualFiles = sortedFiles.slice(0, settings.insertRelevantQuestionsFilesCount);
    console.log({ actualFiles });
    const filesContent = yield getFilesContent(app, actualFiles);
    const gptResponse = yield getResponse(settings.apiKey, [
        {
            role: "system",
            content: `
${settings.relevantQuestionsSystemPrompt}
${RELEVANT_QUESTION_SYSTEM_PROMPT}
`,
        },
        {
            role: "user",
            content: filesContent,
        },
    ], { isJSON: true });
    // console.log({ gptResponse });
    yield createCanvasGroup(app, "Questions", gptResponse.questions);
    new Notice("Generating relevant questions done successfully.");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsZXZhbnRRdWVzdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWxldmFudFF1ZXN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFPLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV2QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVoRCxNQUFNLCtCQUErQixHQUFHOzs7Ozs7OztDQVF2QyxDQUFDLElBQUksRUFBRSxDQUFDO0FBRVQsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FDekMsR0FBUSxFQUNSLFFBQWlDLEVBQ2hDLEVBQUU7SUFDSCxJQUFJLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBRS9DLE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRWpELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXRFLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQ3BDLENBQUMsRUFDRCxRQUFRLENBQUMsaUNBQWlDLENBQzFDLENBQUM7SUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUU3QixNQUFNLFlBQVksR0FBRyxNQUFNLGVBQWUsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFN0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxXQUFXLENBQ3BDLFFBQVEsQ0FBQyxNQUFNLEVBQ2Y7UUFDQztZQUNDLElBQUksRUFBRSxRQUFRO1lBQ2QsT0FBTyxFQUFFO0VBQ1gsUUFBUSxDQUFDLDZCQUE2QjtFQUN0QywrQkFBK0I7Q0FDaEM7U0FDRztRQUNEO1lBQ0MsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsWUFBWTtTQUNyQjtLQUNELEVBQ0QsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQ2hCLENBQUM7SUFDRixnQ0FBZ0M7SUFFaEMsTUFBTSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUVqRSxJQUFJLE1BQU0sQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQ2hFLENBQUMsQ0FBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IEF1Z21lbnRlZENhbnZhc1NldHRpbmdzIH0gZnJvbSBcIi4uLy4uL3NldHRpbmdzL0F1Z21lbnRlZENhbnZhc1NldHRpbmdzXCI7XG5pbXBvcnQgeyBnZXRGaWxlc0NvbnRlbnQgfSBmcm9tIFwiLi4vLi4vb2JzaWRpYW4vZmlsZVV0aWxcIjtcbmltcG9ydCB7IGdldFJlc3BvbnNlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NoYXRncHRcIjtcbmltcG9ydCB7IGNyZWF0ZUNhbnZhc0dyb3VwIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmNvbnN0IFJFTEVWQU5UX1FVRVNUSU9OX1NZU1RFTV9QUk9NUFQgPSBgXG5UaGVyZSBtdXN0IGJlIDYgcXVlc3Rpb25zLlxuXG5Zb3UgbXVzdCByZXNwb25kIGluIHRoaXMgSlNPTiBmb3JtYXQ6IHtcblx0XCJxdWVzdGlvbnNcIjogVGhlIHF1ZXN0aW9uc1xufVxuXG5Zb3UgbXVzdCByZXNwb25kIGluIHRoZSBsYW5ndWFnZSB0aGUgdXNlciB1c2VkLlxuYC50cmltKCk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVBZGRSZWxldmFudFF1ZXN0aW9ucyA9IGFzeW5jIChcblx0YXBwOiBBcHAsXG5cdHNldHRpbmdzOiBBdWdtZW50ZWRDYW52YXNTZXR0aW5nc1xuKSA9PiB7XG5cdG5ldyBOb3RpY2UoXCJHZW5lcmF0aW5nIHJlbGV2YW50IHF1ZXN0aW9ucy4uLlwiKTtcblxuXHRjb25zdCBmaWxlcyA9IGF3YWl0IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cblx0Y29uc3Qgc29ydGVkRmlsZXMgPSBmaWxlcy5zb3J0KChhLCBiKSA9PiBiLnN0YXQubXRpbWUgLSBhLnN0YXQubXRpbWUpO1xuXG5cdGNvbnN0IGFjdHVhbEZpbGVzID0gc29ydGVkRmlsZXMuc2xpY2UoXG5cdFx0MCxcblx0XHRzZXR0aW5ncy5pbnNlcnRSZWxldmFudFF1ZXN0aW9uc0ZpbGVzQ291bnRcblx0KTtcblx0Y29uc29sZS5sb2coeyBhY3R1YWxGaWxlcyB9KTtcblxuXHRjb25zdCBmaWxlc0NvbnRlbnQgPSBhd2FpdCBnZXRGaWxlc0NvbnRlbnQoYXBwLCBhY3R1YWxGaWxlcyk7XG5cblx0Y29uc3QgZ3B0UmVzcG9uc2UgPSBhd2FpdCBnZXRSZXNwb25zZShcblx0XHRzZXR0aW5ncy5hcGlLZXksXG5cdFx0W1xuXHRcdFx0e1xuXHRcdFx0XHRyb2xlOiBcInN5c3RlbVwiLFxuXHRcdFx0XHRjb250ZW50OiBgXG4ke3NldHRpbmdzLnJlbGV2YW50UXVlc3Rpb25zU3lzdGVtUHJvbXB0fVxuJHtSRUxFVkFOVF9RVUVTVElPTl9TWVNURU1fUFJPTVBUfVxuYCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHJvbGU6IFwidXNlclwiLFxuXHRcdFx0XHRjb250ZW50OiBmaWxlc0NvbnRlbnQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0eyBpc0pTT046IHRydWUgfVxuXHQpO1xuXHQvLyBjb25zb2xlLmxvZyh7IGdwdFJlc3BvbnNlIH0pO1xuXG5cdGF3YWl0IGNyZWF0ZUNhbnZhc0dyb3VwKGFwcCwgXCJRdWVzdGlvbnNcIiwgZ3B0UmVzcG9uc2UucXVlc3Rpb25zKTtcblxuXHRuZXcgTm90aWNlKFwiR2VuZXJhdGluZyByZWxldmFudCBxdWVzdGlvbnMgZG9uZSBzdWNjZXNzZnVsbHkuXCIpO1xufTtcbiJdfQ==