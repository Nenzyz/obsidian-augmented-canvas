import { __awaiter } from "tslib";
import { calcHeight, createNode } from "src/obsidian/canvas-patches";
import { getActiveCanvas } from "src/utils";
import { streamResponse } from "src/utils/chatgpt";
import { NOTE_INCR_HEIGHT_STEP, NOTE_MIN_HEIGHT, } from "../canvasNodeMenuActions/noteGenerator";
import { readFolderMarkdownContent } from "src/obsidian/fileUtil";
export const runPromptFolder = (app, settings, systemPrompt, folder) => __awaiter(void 0, void 0, void 0, function* () {
    const canvas = getActiveCanvas(app);
    if (!canvas)
        return;
    const NODE_WIDTH = 800;
    const NODE_HEIGHT = 300;
    const text = `\`\`\`Calling AI (${settings.apiModel})...\`\`\``;
    const created = createNode(canvas, {
        pos: {
            // @ts-expect-error
            x: canvas.x - NODE_WIDTH / 2,
            // @ts-expect-error
            y: canvas.y - NODE_HEIGHT / 2,
        },
        // position: "left",
        size: {
            height: calcHeight({
                // parentHeight: NODE_HEIGHT,
                text,
            }),
            width: NODE_WIDTH,
        },
        text,
        focus: false,
    });
    // canvas.menu.menuEl.append(new MenuItem())
    const folderContentText = yield readFolderMarkdownContent(app, folder);
    const messages = [
        {
            role: "system",
            content: systemPrompt.prompt,
        },
        {
            role: "user",
            content: folderContentText,
        },
    ];
    let firstDelta = true;
    yield streamResponse(settings.apiKey, 
    // settings.apiModel,
    messages, {
        model: settings.apiModel,
        max_tokens: settings.maxResponseTokens || undefined,
        // max_tokens: getTokenLimit(settings) - tokenCount - 1,
    }, (delta) => {
        // * Last call
        if (!delta) {
            return;
        }
        let newText;
        if (firstDelta) {
            newText = delta;
            firstDelta = false;
            created.moveAndResize({
                height: NOTE_MIN_HEIGHT,
                width: created.width,
                x: created.x,
                y: created.y,
            });
        }
        else {
            const height = calcHeight({
                text: created.text,
            });
            if (height > created.height) {
                created.moveAndResize({
                    height: created.height + NOTE_INCR_HEIGHT_STEP,
                    width: created.width,
                    x: created.x,
                    y: created.y,
                });
            }
            newText = created.text + delta;
        }
        created.setText(newText);
    });
    canvas.requestSave();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuUHJvbXB0Rm9sZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnVuUHJvbXB0Rm9sZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBS3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFDTixxQkFBcUIsRUFDckIsZUFBZSxHQUNmLE1BQU0sd0NBQXdDLENBQUM7QUFDaEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFbEUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzlCLEdBQVEsRUFDUixRQUFpQyxFQUNqQyxZQUEwQixFQUMxQixNQUFlLEVBQ2QsRUFBRTtJQUNILE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU87SUFFcEIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ3ZCLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztJQUN4QixNQUFNLElBQUksR0FBRyxxQkFBcUIsUUFBUSxDQUFDLFFBQVEsWUFBWSxDQUFDO0lBQ2hFLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUU7UUFDbEMsR0FBRyxFQUFFO1lBQ0osbUJBQW1CO1lBQ25CLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLFVBQVUsR0FBRyxDQUFDO1lBQzVCLG1CQUFtQjtZQUNuQixDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxXQUFXLEdBQUcsQ0FBQztTQUM3QjtRQUNELG9CQUFvQjtRQUNwQixJQUFJLEVBQUU7WUFDTCxNQUFNLEVBQUUsVUFBVSxDQUFDO2dCQUNsQiw2QkFBNkI7Z0JBQzdCLElBQUk7YUFDSixDQUFDO1lBQ0YsS0FBSyxFQUFFLFVBQVU7U0FDakI7UUFDRCxJQUFJO1FBQ0osS0FBSyxFQUFFLEtBQUs7S0FDWixDQUFDLENBQUM7SUFDSCw0Q0FBNEM7SUFFNUMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUV2RSxNQUFNLFFBQVEsR0FBaUM7UUFDOUM7WUFDQyxJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxZQUFZLENBQUMsTUFBTTtTQUM1QjtRQUNEO1lBQ0MsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsaUJBQWlCO1NBQzFCO0tBQ0QsQ0FBQztJQUVGLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQztJQUN0QixNQUFNLGNBQWMsQ0FDbkIsUUFBUSxDQUFDLE1BQU07SUFDZixxQkFBcUI7SUFDckIsUUFBUSxFQUNSO1FBQ0MsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRO1FBQ3hCLFVBQVUsRUFBRSxRQUFRLENBQUMsaUJBQWlCLElBQUksU0FBUztRQUNuRCx3REFBd0Q7S0FDeEQsRUFDRCxDQUFDLEtBQWMsRUFBRSxFQUFFO1FBQ2xCLGNBQWM7UUFDZCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1gsT0FBTztTQUNQO1FBRUQsSUFBSSxPQUFPLENBQUM7UUFDWixJQUFJLFVBQVUsRUFBRTtZQUNmLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDaEIsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUVuQixPQUFPLENBQUMsYUFBYSxDQUFDO2dCQUNyQixNQUFNLEVBQUUsZUFBZTtnQkFDdkIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO2dCQUNwQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ1osQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ1osQ0FBQyxDQUFDO1NBQ0g7YUFBTTtZQUNOLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQztnQkFDekIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO2FBQ2xCLENBQUMsQ0FBQztZQUNILElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Z0JBQzVCLE9BQU8sQ0FBQyxhQUFhLENBQUM7b0JBQ3JCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxHQUFHLHFCQUFxQjtvQkFDOUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO29CQUNwQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQ1osQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNaLENBQUMsQ0FBQzthQUNIO1lBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQ0QsQ0FBQztJQUVGLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN0QixDQUFDLENBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgTm90aWNlLCBURm9sZGVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSB9IGZyb20gXCJvcGVuYWkvcmVzb3VyY2VzXCI7XG5pbXBvcnQgeyBjYWxjSGVpZ2h0LCBjcmVhdGVOb2RlIH0gZnJvbSBcInNyYy9vYnNpZGlhbi9jYW52YXMtcGF0Y2hlc1wiO1xuaW1wb3J0IHtcblx0QXVnbWVudGVkQ2FudmFzU2V0dGluZ3MsXG5cdFN5c3RlbVByb21wdCxcbn0gZnJvbSBcInNyYy9zZXR0aW5ncy9BdWdtZW50ZWRDYW52YXNTZXR0aW5nc1wiO1xuaW1wb3J0IHsgZ2V0QWN0aXZlQ2FudmFzIH0gZnJvbSBcInNyYy91dGlsc1wiO1xuaW1wb3J0IHsgc3RyZWFtUmVzcG9uc2UgfSBmcm9tIFwic3JjL3V0aWxzL2NoYXRncHRcIjtcbmltcG9ydCB7XG5cdE5PVEVfSU5DUl9IRUlHSFRfU1RFUCxcblx0Tk9URV9NSU5fSEVJR0hULFxufSBmcm9tIFwiLi4vY2FudmFzTm9kZU1lbnVBY3Rpb25zL25vdGVHZW5lcmF0b3JcIjtcbmltcG9ydCB7IHJlYWRGb2xkZXJNYXJrZG93bkNvbnRlbnQgfSBmcm9tIFwic3JjL29ic2lkaWFuL2ZpbGVVdGlsXCI7XG5cbmV4cG9ydCBjb25zdCBydW5Qcm9tcHRGb2xkZXIgPSBhc3luYyAoXG5cdGFwcDogQXBwLFxuXHRzZXR0aW5nczogQXVnbWVudGVkQ2FudmFzU2V0dGluZ3MsXG5cdHN5c3RlbVByb21wdDogU3lzdGVtUHJvbXB0LFxuXHRmb2xkZXI6IFRGb2xkZXJcbikgPT4ge1xuXHRjb25zdCBjYW52YXMgPSBnZXRBY3RpdmVDYW52YXMoYXBwKTtcblx0aWYgKCFjYW52YXMpIHJldHVybjtcblxuXHRjb25zdCBOT0RFX1dJRFRIID0gODAwO1xuXHRjb25zdCBOT0RFX0hFSUdIVCA9IDMwMDtcblx0Y29uc3QgdGV4dCA9IGBcXGBcXGBcXGBDYWxsaW5nIEFJICgke3NldHRpbmdzLmFwaU1vZGVsfSkuLi5cXGBcXGBcXGBgO1xuXHRjb25zdCBjcmVhdGVkID0gY3JlYXRlTm9kZShjYW52YXMsIHtcblx0XHRwb3M6IHtcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0XHRcdHg6IGNhbnZhcy54IC0gTk9ERV9XSURUSCAvIDIsXG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHR5OiBjYW52YXMueSAtIE5PREVfSEVJR0hUIC8gMixcblx0XHR9LFxuXHRcdC8vIHBvc2l0aW9uOiBcImxlZnRcIixcblx0XHRzaXplOiB7XG5cdFx0XHRoZWlnaHQ6IGNhbGNIZWlnaHQoe1xuXHRcdFx0XHQvLyBwYXJlbnRIZWlnaHQ6IE5PREVfSEVJR0hULFxuXHRcdFx0XHR0ZXh0LFxuXHRcdFx0fSksXG5cdFx0XHR3aWR0aDogTk9ERV9XSURUSCxcblx0XHR9LFxuXHRcdHRleHQsXG5cdFx0Zm9jdXM6IGZhbHNlLFxuXHR9KTtcblx0Ly8gY2FudmFzLm1lbnUubWVudUVsLmFwcGVuZChuZXcgTWVudUl0ZW0oKSlcblxuXHRjb25zdCBmb2xkZXJDb250ZW50VGV4dCA9IGF3YWl0IHJlYWRGb2xkZXJNYXJrZG93bkNvbnRlbnQoYXBwLCBmb2xkZXIpO1xuXG5cdGNvbnN0IG1lc3NhZ2VzOiBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbVtdID0gW1xuXHRcdHtcblx0XHRcdHJvbGU6IFwic3lzdGVtXCIsXG5cdFx0XHRjb250ZW50OiBzeXN0ZW1Qcm9tcHQucHJvbXB0LFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cm9sZTogXCJ1c2VyXCIsXG5cdFx0XHRjb250ZW50OiBmb2xkZXJDb250ZW50VGV4dCxcblx0XHR9LFxuXHRdO1xuXG5cdGxldCBmaXJzdERlbHRhID0gdHJ1ZTtcblx0YXdhaXQgc3RyZWFtUmVzcG9uc2UoXG5cdFx0c2V0dGluZ3MuYXBpS2V5LFxuXHRcdC8vIHNldHRpbmdzLmFwaU1vZGVsLFxuXHRcdG1lc3NhZ2VzLFxuXHRcdHtcblx0XHRcdG1vZGVsOiBzZXR0aW5ncy5hcGlNb2RlbCxcblx0XHRcdG1heF90b2tlbnM6IHNldHRpbmdzLm1heFJlc3BvbnNlVG9rZW5zIHx8IHVuZGVmaW5lZCxcblx0XHRcdC8vIG1heF90b2tlbnM6IGdldFRva2VuTGltaXQoc2V0dGluZ3MpIC0gdG9rZW5Db3VudCAtIDEsXG5cdFx0fSxcblx0XHQoZGVsdGE/OiBzdHJpbmcpID0+IHtcblx0XHRcdC8vICogTGFzdCBjYWxsXG5cdFx0XHRpZiAoIWRlbHRhKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bGV0IG5ld1RleHQ7XG5cdFx0XHRpZiAoZmlyc3REZWx0YSkge1xuXHRcdFx0XHRuZXdUZXh0ID0gZGVsdGE7XG5cdFx0XHRcdGZpcnN0RGVsdGEgPSBmYWxzZTtcblxuXHRcdFx0XHRjcmVhdGVkLm1vdmVBbmRSZXNpemUoe1xuXHRcdFx0XHRcdGhlaWdodDogTk9URV9NSU5fSEVJR0hULFxuXHRcdFx0XHRcdHdpZHRoOiBjcmVhdGVkLndpZHRoLFxuXHRcdFx0XHRcdHg6IGNyZWF0ZWQueCxcblx0XHRcdFx0XHR5OiBjcmVhdGVkLnksXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgaGVpZ2h0ID0gY2FsY0hlaWdodCh7XG5cdFx0XHRcdFx0dGV4dDogY3JlYXRlZC50ZXh0LFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKGhlaWdodCA+IGNyZWF0ZWQuaGVpZ2h0KSB7XG5cdFx0XHRcdFx0Y3JlYXRlZC5tb3ZlQW5kUmVzaXplKHtcblx0XHRcdFx0XHRcdGhlaWdodDogY3JlYXRlZC5oZWlnaHQgKyBOT1RFX0lOQ1JfSEVJR0hUX1NURVAsXG5cdFx0XHRcdFx0XHR3aWR0aDogY3JlYXRlZC53aWR0aCxcblx0XHRcdFx0XHRcdHg6IGNyZWF0ZWQueCxcblx0XHRcdFx0XHRcdHk6IGNyZWF0ZWQueSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuZXdUZXh0ID0gY3JlYXRlZC50ZXh0ICsgZGVsdGE7XG5cdFx0XHR9XG5cdFx0XHRjcmVhdGVkLnNldFRleHQobmV3VGV4dCk7XG5cdFx0fVxuXHQpO1xuXG5cdGNhbnZhcy5yZXF1ZXN0U2F2ZSgpO1xufTtcbiJdfQ==