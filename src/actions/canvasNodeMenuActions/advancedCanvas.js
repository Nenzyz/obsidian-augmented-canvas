import { __awaiter } from "tslib";
import { setIcon, setTooltip } from "obsidian";
import { noteGenerator } from "./noteGenerator";
import { getResponse } from "../../utils/chatgpt";
import { getActiveCanvasNodes } from "src/utils";
const SYSTEM_PROMPT_QUESTIONS = `
You must respond in this JSON format: {
	"questions": Follow up questions the user could ask based on the chat history, must be an array
}
The questions must be asked in the same language the user used, default to English.
`.trim();
export const addAskAIButton = (app, settings, menuEl) => __awaiter(void 0, void 0, void 0, function* () {
    const buttonEl_AskAI = createEl("button", "clickable-icon gpt-menu-item");
    setTooltip(buttonEl_AskAI, "Ask AI", {
        placement: "top",
    });
    setIcon(buttonEl_AskAI, "lucide-sparkles");
    menuEl.appendChild(buttonEl_AskAI);
    buttonEl_AskAI.addEventListener("click", () => __awaiter(void 0, void 0, void 0, function* () {
        const { generateNote } = noteGenerator(app, settings);
        yield generateNote();
    }));
});
export const handleCallGPT_Question = (app, settings, node, question) => __awaiter(void 0, void 0, void 0, function* () {
    if (node.unknownData.type === "group") {
        return;
    }
    const { generateNote } = noteGenerator(app, settings);
    yield generateNote(question);
});
export const handleCallGPT_Questions = (app, settings, node) => __awaiter(void 0, void 0, void 0, function* () {
    const { buildMessages } = noteGenerator(app, settings);
    const { messages, tokenCount } = yield buildMessages(node, {
        systemPrompt: SYSTEM_PROMPT_QUESTIONS,
    });
    if (messages.length <= 1)
        return;
    const gptResponse = yield getResponse(settings.apiKey, 
    // settings.apiModel,
    messages, {
        model: settings.apiModel,
        max_tokens: settings.maxResponseTokens || undefined,
        // max_tokens: getTokenLimit(settings) - tokenCount - 1,
        temperature: settings.temperature,
        isJSON: true,
    });
    return gptResponse.questions;
});
const handleRegenerateResponse = (app, settings) => __awaiter(void 0, void 0, void 0, function* () {
    const activeNode = getActiveCanvasNodes(app)[0];
    // const canvas = getActiveCanvas(app);
    // // @ts-expect-error
    // const toNode = activeNode.to.node;
    // console.log({ toNode });
    // canvas!.removeNode(toNode);
    // canvas?.requestSave();
    const { generateNote } = noteGenerator(app, settings, 
    // @ts-expect-error
    activeNode.from.node, 
    // @ts-expect-error
    activeNode.to.node);
    yield generateNote();
});
export const addRegenerateResponse = (app, settings, menuEl) => __awaiter(void 0, void 0, void 0, function* () {
    const buttonEl_AskAI = createEl("button", "clickable-icon gpt-menu-item");
    setTooltip(buttonEl_AskAI, "Regenerate response", {
        placement: "top",
    });
    // TODO
    setIcon(buttonEl_AskAI, "lucide-rotate-cw");
    menuEl.appendChild(buttonEl_AskAI);
    buttonEl_AskAI.addEventListener("click", () => handleRegenerateResponse(app, settings));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWR2YW5jZWRDYW52YXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZHZhbmNlZENhbnZhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFPLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDcEQsT0FBTyxFQUFpQixhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUcvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFtQixvQkFBb0IsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVsRSxNQUFNLHVCQUF1QixHQUFHOzs7OztDQUsvQixDQUFDLElBQUksRUFBRSxDQUFDO0FBRVQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzdCLEdBQVEsRUFDUixRQUFpQyxFQUNqQyxNQUFtQixFQUNsQixFQUFFO0lBQ0gsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO0lBQzFFLFVBQVUsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFO1FBQ3BDLFNBQVMsRUFBRSxLQUFLO0tBQ2hCLENBQUMsQ0FBQztJQUNILE9BQU8sQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRW5DLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBUyxFQUFFO1FBQ25ELE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXRELE1BQU0sWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQSxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FDckMsR0FBUSxFQUNSLFFBQWlDLEVBQ2pDLElBQWdCLEVBQ2hCLFFBQWdCLEVBQ2YsRUFBRTtJQUNILElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ3RDLE9BQU87S0FDUDtJQUVELE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQSxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FDdEMsR0FBUSxFQUNSLFFBQWlDLEVBQ2pDLElBQWdCLEVBQ2YsRUFBRTtJQUNILE1BQU0sRUFBRSxhQUFhLEVBQUUsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTSxhQUFhLENBQUMsSUFBSSxFQUFFO1FBQzFELFlBQVksRUFBRSx1QkFBdUI7S0FDckMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUM7UUFBRSxPQUFPO0lBRWpDLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUNwQyxRQUFRLENBQUMsTUFBTTtJQUNmLHFCQUFxQjtJQUNyQixRQUFRLEVBQ1I7UUFDQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVE7UUFDeEIsVUFBVSxFQUFFLFFBQVEsQ0FBQyxpQkFBaUIsSUFBSSxTQUFTO1FBQ25ELHdEQUF3RDtRQUN4RCxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVc7UUFDakMsTUFBTSxFQUFFLElBQUk7S0FDWixDQUNELENBQUM7SUFFRixPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUM7QUFDOUIsQ0FBQyxDQUFBLENBQUM7QUFFRixNQUFNLHdCQUF3QixHQUFHLENBQ2hDLEdBQVEsRUFDUixRQUFpQyxFQUNoQyxFQUFFO0lBQ0gsTUFBTSxVQUFVLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakQsdUNBQXVDO0lBRXZDLHNCQUFzQjtJQUN0QixxQ0FBcUM7SUFFckMsMkJBQTJCO0lBRTNCLDhCQUE4QjtJQUM5Qix5QkFBeUI7SUFFekIsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLGFBQWEsQ0FDckMsR0FBRyxFQUNILFFBQVE7SUFDUixtQkFBbUI7SUFDbkIsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJO0lBQ3BCLG1CQUFtQjtJQUNuQixVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FDbEIsQ0FBQztJQUVGLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFDdEIsQ0FBQyxDQUFBLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUNwQyxHQUFRLEVBQ1IsUUFBaUMsRUFDakMsTUFBbUIsRUFDbEIsRUFBRTtJQUNILE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsOEJBQThCLENBQUMsQ0FBQztJQUMxRSxVQUFVLENBQUMsY0FBYyxFQUFFLHFCQUFxQixFQUFFO1FBQ2pELFNBQVMsRUFBRSxLQUFLO0tBQ2hCLENBQUMsQ0FBQztJQUNILE9BQU87SUFDUCxPQUFPLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDNUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVuQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUM3Qyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQ3ZDLENBQUM7QUFDSCxDQUFDLENBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgc2V0SWNvbiwgc2V0VG9vbHRpcCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgZ2V0VG9rZW5MaW1pdCwgbm90ZUdlbmVyYXRvciB9IGZyb20gXCIuL25vdGVHZW5lcmF0b3JcIjtcbmltcG9ydCB7IEF1Z21lbnRlZENhbnZhc1NldHRpbmdzIH0gZnJvbSBcIi4uLy4uL3NldHRpbmdzL0F1Z21lbnRlZENhbnZhc1NldHRpbmdzXCI7XG5pbXBvcnQgeyBDYW52YXNOb2RlIH0gZnJvbSBcIi4uLy4uL29ic2lkaWFuL2NhbnZhcy1pbnRlcm5hbFwiO1xuaW1wb3J0IHsgZ2V0UmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY2hhdGdwdFwiO1xuaW1wb3J0IHsgZ2V0QWN0aXZlQ2FudmFzLCBnZXRBY3RpdmVDYW52YXNOb2RlcyB9IGZyb20gXCJzcmMvdXRpbHNcIjtcblxuY29uc3QgU1lTVEVNX1BST01QVF9RVUVTVElPTlMgPSBgXG5Zb3UgbXVzdCByZXNwb25kIGluIHRoaXMgSlNPTiBmb3JtYXQ6IHtcblx0XCJxdWVzdGlvbnNcIjogRm9sbG93IHVwIHF1ZXN0aW9ucyB0aGUgdXNlciBjb3VsZCBhc2sgYmFzZWQgb24gdGhlIGNoYXQgaGlzdG9yeSwgbXVzdCBiZSBhbiBhcnJheVxufVxuVGhlIHF1ZXN0aW9ucyBtdXN0IGJlIGFza2VkIGluIHRoZSBzYW1lIGxhbmd1YWdlIHRoZSB1c2VyIHVzZWQsIGRlZmF1bHQgdG8gRW5nbGlzaC5cbmAudHJpbSgpO1xuXG5leHBvcnQgY29uc3QgYWRkQXNrQUlCdXR0b24gPSBhc3luYyAoXG5cdGFwcDogQXBwLFxuXHRzZXR0aW5nczogQXVnbWVudGVkQ2FudmFzU2V0dGluZ3MsXG5cdG1lbnVFbDogSFRNTEVsZW1lbnRcbikgPT4ge1xuXHRjb25zdCBidXR0b25FbF9Bc2tBSSA9IGNyZWF0ZUVsKFwiYnV0dG9uXCIsIFwiY2xpY2thYmxlLWljb24gZ3B0LW1lbnUtaXRlbVwiKTtcblx0c2V0VG9vbHRpcChidXR0b25FbF9Bc2tBSSwgXCJBc2sgQUlcIiwge1xuXHRcdHBsYWNlbWVudDogXCJ0b3BcIixcblx0fSk7XG5cdHNldEljb24oYnV0dG9uRWxfQXNrQUksIFwibHVjaWRlLXNwYXJrbGVzXCIpO1xuXHRtZW51RWwuYXBwZW5kQ2hpbGQoYnV0dG9uRWxfQXNrQUkpO1xuXG5cdGJ1dHRvbkVsX0Fza0FJLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XG5cdFx0Y29uc3QgeyBnZW5lcmF0ZU5vdGUgfSA9IG5vdGVHZW5lcmF0b3IoYXBwLCBzZXR0aW5ncyk7XG5cblx0XHRhd2FpdCBnZW5lcmF0ZU5vdGUoKTtcblx0fSk7XG59O1xuXG5leHBvcnQgY29uc3QgaGFuZGxlQ2FsbEdQVF9RdWVzdGlvbiA9IGFzeW5jIChcblx0YXBwOiBBcHAsXG5cdHNldHRpbmdzOiBBdWdtZW50ZWRDYW52YXNTZXR0aW5ncyxcblx0bm9kZTogQ2FudmFzTm9kZSxcblx0cXVlc3Rpb246IHN0cmluZ1xuKSA9PiB7XG5cdGlmIChub2RlLnVua25vd25EYXRhLnR5cGUgPT09IFwiZ3JvdXBcIikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHsgZ2VuZXJhdGVOb3RlIH0gPSBub3RlR2VuZXJhdG9yKGFwcCwgc2V0dGluZ3MpO1xuXHRhd2FpdCBnZW5lcmF0ZU5vdGUocXVlc3Rpb24pO1xufTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZUNhbGxHUFRfUXVlc3Rpb25zID0gYXN5bmMgKFxuXHRhcHA6IEFwcCxcblx0c2V0dGluZ3M6IEF1Z21lbnRlZENhbnZhc1NldHRpbmdzLFxuXHRub2RlOiBDYW52YXNOb2RlXG4pID0+IHtcblx0Y29uc3QgeyBidWlsZE1lc3NhZ2VzIH0gPSBub3RlR2VuZXJhdG9yKGFwcCwgc2V0dGluZ3MpO1xuXHRjb25zdCB7IG1lc3NhZ2VzLCB0b2tlbkNvdW50IH0gPSBhd2FpdCBidWlsZE1lc3NhZ2VzKG5vZGUsIHtcblx0XHRzeXN0ZW1Qcm9tcHQ6IFNZU1RFTV9QUk9NUFRfUVVFU1RJT05TLFxuXHR9KTtcblx0aWYgKG1lc3NhZ2VzLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cblx0Y29uc3QgZ3B0UmVzcG9uc2UgPSBhd2FpdCBnZXRSZXNwb25zZShcblx0XHRzZXR0aW5ncy5hcGlLZXksXG5cdFx0Ly8gc2V0dGluZ3MuYXBpTW9kZWwsXG5cdFx0bWVzc2FnZXMsXG5cdFx0e1xuXHRcdFx0bW9kZWw6IHNldHRpbmdzLmFwaU1vZGVsLFxuXHRcdFx0bWF4X3Rva2Vuczogc2V0dGluZ3MubWF4UmVzcG9uc2VUb2tlbnMgfHwgdW5kZWZpbmVkLFxuXHRcdFx0Ly8gbWF4X3Rva2VuczogZ2V0VG9rZW5MaW1pdChzZXR0aW5ncykgLSB0b2tlbkNvdW50IC0gMSxcblx0XHRcdHRlbXBlcmF0dXJlOiBzZXR0aW5ncy50ZW1wZXJhdHVyZSxcblx0XHRcdGlzSlNPTjogdHJ1ZSxcblx0XHR9XG5cdCk7XG5cblx0cmV0dXJuIGdwdFJlc3BvbnNlLnF1ZXN0aW9ucztcbn07XG5cbmNvbnN0IGhhbmRsZVJlZ2VuZXJhdGVSZXNwb25zZSA9IGFzeW5jIChcblx0YXBwOiBBcHAsXG5cdHNldHRpbmdzOiBBdWdtZW50ZWRDYW52YXNTZXR0aW5nc1xuKSA9PiB7XG5cdGNvbnN0IGFjdGl2ZU5vZGUgPSBnZXRBY3RpdmVDYW52YXNOb2RlcyhhcHApIVswXTtcblxuXHQvLyBjb25zdCBjYW52YXMgPSBnZXRBY3RpdmVDYW52YXMoYXBwKTtcblxuXHQvLyAvLyBAdHMtZXhwZWN0LWVycm9yXG5cdC8vIGNvbnN0IHRvTm9kZSA9IGFjdGl2ZU5vZGUudG8ubm9kZTtcblxuXHQvLyBjb25zb2xlLmxvZyh7IHRvTm9kZSB9KTtcblxuXHQvLyBjYW52YXMhLnJlbW92ZU5vZGUodG9Ob2RlKTtcblx0Ly8gY2FudmFzPy5yZXF1ZXN0U2F2ZSgpO1xuXG5cdGNvbnN0IHsgZ2VuZXJhdGVOb3RlIH0gPSBub3RlR2VuZXJhdG9yKFxuXHRcdGFwcCxcblx0XHRzZXR0aW5ncyxcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0YWN0aXZlTm9kZS5mcm9tLm5vZGUsXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdGFjdGl2ZU5vZGUudG8ubm9kZVxuXHQpO1xuXG5cdGF3YWl0IGdlbmVyYXRlTm90ZSgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZFJlZ2VuZXJhdGVSZXNwb25zZSA9IGFzeW5jIChcblx0YXBwOiBBcHAsXG5cdHNldHRpbmdzOiBBdWdtZW50ZWRDYW52YXNTZXR0aW5ncyxcblx0bWVudUVsOiBIVE1MRWxlbWVudFxuKSA9PiB7XG5cdGNvbnN0IGJ1dHRvbkVsX0Fza0FJID0gY3JlYXRlRWwoXCJidXR0b25cIiwgXCJjbGlja2FibGUtaWNvbiBncHQtbWVudS1pdGVtXCIpO1xuXHRzZXRUb29sdGlwKGJ1dHRvbkVsX0Fza0FJLCBcIlJlZ2VuZXJhdGUgcmVzcG9uc2VcIiwge1xuXHRcdHBsYWNlbWVudDogXCJ0b3BcIixcblx0fSk7XG5cdC8vIFRPRE9cblx0c2V0SWNvbihidXR0b25FbF9Bc2tBSSwgXCJsdWNpZGUtcm90YXRlLWN3XCIpO1xuXHRtZW51RWwuYXBwZW5kQ2hpbGQoYnV0dG9uRWxfQXNrQUkpO1xuXG5cdGJ1dHRvbkVsX0Fza0FJLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxuXHRcdGhhbmRsZVJlZ2VuZXJhdGVSZXNwb25zZShhcHAsIHNldHRpbmdzKVxuXHQpO1xufTtcbiJdfQ==