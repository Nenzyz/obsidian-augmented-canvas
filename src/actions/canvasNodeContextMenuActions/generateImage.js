import { __awaiter } from "tslib";
import { Notice } from "obsidian";
import { createImage } from "../../utils/chatgpt";
import { getActiveCanvas, getActiveCanvasNodes, getCanvasActiveNoteText, getImageSaveFolderPath, } from "../../utils";
import { saveBase64Image } from "../../obsidian/imageUtils";
import { createNode } from "../../obsidian/canvas-patches";
import { generateFileName, updateNodeAndSave } from "../../obsidian/fileUtil";
export const handleGenerateImage = (app, settings) => __awaiter(void 0, void 0, void 0, function* () {
    new Notice(`Generating image using ${settings.imageModel}...`);
    const canvas = getActiveCanvas(app);
    if (!canvas)
        return;
    const activeCanvasNodes = getActiveCanvasNodes(app);
    if (!activeCanvasNodes || activeCanvasNodes.length !== 1)
        return;
    const parentNode = activeCanvasNodes[0];
    const nodeText = yield getCanvasActiveNoteText(app);
    if (!nodeText)
        return;
    const IMAGE_WIDTH = parentNode.width;
    const IMAGE_HEIGHT = IMAGE_WIDTH * (1024 / 1792) + 20;
    const node = createNode(canvas, {
        text: `\`Calling AI (${settings.imageModel})...\``,
        size: {
            width: IMAGE_WIDTH,
            height: IMAGE_HEIGHT,
        },
    }, parentNode);
    const b64Image = yield createImage(settings.apiKey, nodeText, {
        model: settings.imageModel,
    });
    const imageFileName = generateFileName("AI-Image");
    const imageFolder = yield getImageSaveFolderPath(app, settings);
    // console.log({ imageFolder });
    yield saveBase64Image(app, `${imageFolder}/${imageFileName}.png`, b64Image);
    new Notice(`Generating image "${imageFileName}" done successfully.`);
    updateNodeAndSave(canvas, node, {
        text: `![[${imageFolder}/${imageFileName}.png]]`,
    });
    // TODO : For now Obsidian API to .createFileNode is bugged
    // canvas.removeNode(node);
    // await sleep(100);
    // const file = app.vault.getAbstractFileByPath(
    // 	`${imageFileName}.png`
    // ) as TFile;
    // console.log({ file });
    // const node2 = createNode(
    // 	canvas,
    // 	{
    // 		type: "file",
    // 		file,
    // 		size: {
    // 			width: IMAGE_WIDTH,
    // 			height: IMAGE_HEIGHT,
    // 		},
    // 	},
    // 	parentNode
    // );
    // node2.moveAndResize({
    // 	size: {
    // 		width: IMAGE_WIDTH,
    // 		height: IMAGE_HEIGHT,
    // 	},
    // });
    canvas.requestSave();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVJbWFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdlbmVyYXRlSW1hZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBTyxNQUFNLEVBQVMsTUFBTSxVQUFVLENBQUM7QUFFOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFDTixlQUFlLEVBQ2Ysb0JBQW9CLEVBQ3BCLHVCQUF1QixFQUN2QixzQkFBc0IsR0FDdEIsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUNsQyxHQUFRLEVBQ1IsUUFBaUMsRUFDaEMsRUFBRTtJQUNILElBQUksTUFBTSxDQUFDLDBCQUEwQixRQUFRLENBQUMsVUFBVSxLQUFLLENBQUMsQ0FBQztJQUUvRCxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEMsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPO0lBRXBCLE1BQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsSUFBSSxDQUFDLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTztJQUVqRSxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV4QyxNQUFNLFFBQVEsR0FBRyxNQUFNLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELElBQUksQ0FBQyxRQUFRO1FBQUUsT0FBTztJQUV0QixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBQ3JDLE1BQU0sWUFBWSxHQUFHLFdBQVcsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFdEQsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUN0QixNQUFNLEVBQ047UUFDQyxJQUFJLEVBQUUsaUJBQWlCLFFBQVEsQ0FBQyxVQUFVLFFBQVE7UUFDbEQsSUFBSSxFQUFFO1lBQ0wsS0FBSyxFQUFFLFdBQVc7WUFDbEIsTUFBTSxFQUFFLFlBQVk7U0FDcEI7S0FDRCxFQUNELFVBQVUsQ0FDVixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7UUFDN0QsS0FBSyxFQUFFLFFBQVEsQ0FBQyxVQUFVO0tBQzFCLENBQUMsQ0FBQztJQUVILE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sV0FBVyxHQUFHLE1BQU0sc0JBQXNCLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLGdDQUFnQztJQUNoQyxNQUFNLGVBQWUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxXQUFXLElBQUksYUFBYSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDNUUsSUFBSSxNQUFNLENBQUMscUJBQXFCLGFBQWEsc0JBQXNCLENBQUMsQ0FBQztJQUVyRSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFO1FBQy9CLElBQUksRUFBRSxNQUFNLFdBQVcsSUFBSSxhQUFhLFFBQVE7S0FDaEQsQ0FBQyxDQUFDO0lBRUgsMkRBQTJEO0lBQzNELDJCQUEyQjtJQUUzQixvQkFBb0I7SUFFcEIsZ0RBQWdEO0lBQ2hELDBCQUEwQjtJQUMxQixjQUFjO0lBQ2QseUJBQXlCO0lBRXpCLDRCQUE0QjtJQUM1QixXQUFXO0lBQ1gsS0FBSztJQUNMLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsWUFBWTtJQUNaLHlCQUF5QjtJQUN6QiwyQkFBMkI7SUFDM0IsT0FBTztJQUNQLE1BQU07SUFDTixjQUFjO0lBQ2QsS0FBSztJQUNMLHdCQUF3QjtJQUN4QixXQUFXO0lBQ1gsd0JBQXdCO0lBQ3hCLDBCQUEwQjtJQUMxQixNQUFNO0lBQ04sTUFBTTtJQUVOLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN0QixDQUFDLENBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgTm90aWNlLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgQXVnbWVudGVkQ2FudmFzU2V0dGluZ3MgfSBmcm9tIFwiLi4vLi4vc2V0dGluZ3MvQXVnbWVudGVkQ2FudmFzU2V0dGluZ3NcIjtcbmltcG9ydCB7IGNyZWF0ZUltYWdlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NoYXRncHRcIjtcbmltcG9ydCB7XG5cdGdldEFjdGl2ZUNhbnZhcyxcblx0Z2V0QWN0aXZlQ2FudmFzTm9kZXMsXG5cdGdldENhbnZhc0FjdGl2ZU5vdGVUZXh0LFxuXHRnZXRJbWFnZVNhdmVGb2xkZXJQYXRoLFxufSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IHNhdmVCYXNlNjRJbWFnZSB9IGZyb20gXCIuLi8uLi9vYnNpZGlhbi9pbWFnZVV0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVOb2RlIH0gZnJvbSBcIi4uLy4uL29ic2lkaWFuL2NhbnZhcy1wYXRjaGVzXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUZpbGVOYW1lLCB1cGRhdGVOb2RlQW5kU2F2ZSB9IGZyb20gXCIuLi8uLi9vYnNpZGlhbi9maWxlVXRpbFwiO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlR2VuZXJhdGVJbWFnZSA9IGFzeW5jIChcblx0YXBwOiBBcHAsXG5cdHNldHRpbmdzOiBBdWdtZW50ZWRDYW52YXNTZXR0aW5nc1xuKSA9PiB7XG5cdG5ldyBOb3RpY2UoYEdlbmVyYXRpbmcgaW1hZ2UgdXNpbmcgJHtzZXR0aW5ncy5pbWFnZU1vZGVsfS4uLmApO1xuXG5cdGNvbnN0IGNhbnZhcyA9IGdldEFjdGl2ZUNhbnZhcyhhcHApO1xuXHRpZiAoIWNhbnZhcykgcmV0dXJuO1xuXG5cdGNvbnN0IGFjdGl2ZUNhbnZhc05vZGVzID0gZ2V0QWN0aXZlQ2FudmFzTm9kZXMoYXBwKTtcblx0aWYgKCFhY3RpdmVDYW52YXNOb2RlcyB8fCBhY3RpdmVDYW52YXNOb2Rlcy5sZW5ndGggIT09IDEpIHJldHVybjtcblxuXHRjb25zdCBwYXJlbnROb2RlID0gYWN0aXZlQ2FudmFzTm9kZXNbMF07XG5cblx0Y29uc3Qgbm9kZVRleHQgPSBhd2FpdCBnZXRDYW52YXNBY3RpdmVOb3RlVGV4dChhcHApO1xuXHRpZiAoIW5vZGVUZXh0KSByZXR1cm47XG5cblx0Y29uc3QgSU1BR0VfV0lEVEggPSBwYXJlbnROb2RlLndpZHRoO1xuXHRjb25zdCBJTUFHRV9IRUlHSFQgPSBJTUFHRV9XSURUSCAqICgxMDI0IC8gMTc5MikgKyAyMDtcblxuXHRjb25zdCBub2RlID0gY3JlYXRlTm9kZShcblx0XHRjYW52YXMsXG5cdFx0e1xuXHRcdFx0dGV4dDogYFxcYENhbGxpbmcgQUkgKCR7c2V0dGluZ3MuaW1hZ2VNb2RlbH0pLi4uXFxgYCxcblx0XHRcdHNpemU6IHtcblx0XHRcdFx0d2lkdGg6IElNQUdFX1dJRFRILFxuXHRcdFx0XHRoZWlnaHQ6IElNQUdFX0hFSUdIVCxcblx0XHRcdH0sXG5cdFx0fSxcblx0XHRwYXJlbnROb2RlXG5cdCk7XG5cblx0Y29uc3QgYjY0SW1hZ2UgPSBhd2FpdCBjcmVhdGVJbWFnZShzZXR0aW5ncy5hcGlLZXksIG5vZGVUZXh0LCB7XG5cdFx0bW9kZWw6IHNldHRpbmdzLmltYWdlTW9kZWwsXG5cdH0pO1xuXG5cdGNvbnN0IGltYWdlRmlsZU5hbWUgPSBnZW5lcmF0ZUZpbGVOYW1lKFwiQUktSW1hZ2VcIik7XG5cdGNvbnN0IGltYWdlRm9sZGVyID0gYXdhaXQgZ2V0SW1hZ2VTYXZlRm9sZGVyUGF0aChhcHAsIHNldHRpbmdzKTtcblx0Ly8gY29uc29sZS5sb2coeyBpbWFnZUZvbGRlciB9KTtcblx0YXdhaXQgc2F2ZUJhc2U2NEltYWdlKGFwcCwgYCR7aW1hZ2VGb2xkZXJ9LyR7aW1hZ2VGaWxlTmFtZX0ucG5nYCwgYjY0SW1hZ2UpO1xuXHRuZXcgTm90aWNlKGBHZW5lcmF0aW5nIGltYWdlIFwiJHtpbWFnZUZpbGVOYW1lfVwiIGRvbmUgc3VjY2Vzc2Z1bGx5LmApO1xuXG5cdHVwZGF0ZU5vZGVBbmRTYXZlKGNhbnZhcywgbm9kZSwge1xuXHRcdHRleHQ6IGAhW1ske2ltYWdlRm9sZGVyfS8ke2ltYWdlRmlsZU5hbWV9LnBuZ11dYCxcblx0fSk7XG5cblx0Ly8gVE9ETyA6IEZvciBub3cgT2JzaWRpYW4gQVBJIHRvIC5jcmVhdGVGaWxlTm9kZSBpcyBidWdnZWRcblx0Ly8gY2FudmFzLnJlbW92ZU5vZGUobm9kZSk7XG5cblx0Ly8gYXdhaXQgc2xlZXAoMTAwKTtcblxuXHQvLyBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcblx0Ly8gXHRgJHtpbWFnZUZpbGVOYW1lfS5wbmdgXG5cdC8vICkgYXMgVEZpbGU7XG5cdC8vIGNvbnNvbGUubG9nKHsgZmlsZSB9KTtcblxuXHQvLyBjb25zdCBub2RlMiA9IGNyZWF0ZU5vZGUoXG5cdC8vIFx0Y2FudmFzLFxuXHQvLyBcdHtcblx0Ly8gXHRcdHR5cGU6IFwiZmlsZVwiLFxuXHQvLyBcdFx0ZmlsZSxcblx0Ly8gXHRcdHNpemU6IHtcblx0Ly8gXHRcdFx0d2lkdGg6IElNQUdFX1dJRFRILFxuXHQvLyBcdFx0XHRoZWlnaHQ6IElNQUdFX0hFSUdIVCxcblx0Ly8gXHRcdH0sXG5cdC8vIFx0fSxcblx0Ly8gXHRwYXJlbnROb2RlXG5cdC8vICk7XG5cdC8vIG5vZGUyLm1vdmVBbmRSZXNpemUoe1xuXHQvLyBcdHNpemU6IHtcblx0Ly8gXHRcdHdpZHRoOiBJTUFHRV9XSURUSCxcblx0Ly8gXHRcdGhlaWdodDogSU1BR0VfSEVJR0hULFxuXHQvLyBcdH0sXG5cdC8vIH0pO1xuXG5cdGNhbnZhcy5yZXF1ZXN0U2F2ZSgpO1xufTtcbiJdfQ==