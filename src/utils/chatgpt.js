import { __awaiter } from "tslib";
// Global AI service instance - will be initialized by the plugin
let aiService = null;
export function setAIService(service) {
    aiService = service;
}
export function getAIService() {
    if (!aiService) {
        throw new Error("AI service not initialized. Make sure the plugin is loaded.");
    }
    return aiService;
}
export const streamResponse = (apiKey, messages, { max_tokens, model, temperature, } = {}, cb) => __awaiter(void 0, void 0, void 0, function* () {
    const service = getAIService();
    yield service.legacyStreamResponse(apiKey, messages, {
        max_tokens,
        model,
        temperature,
    }, cb);
});
export const getResponse = (apiKey, messages, { model, max_tokens, temperature, isJSON, } = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const service = getAIService();
    return service.legacyGenerateResponse(apiKey, messages, {
        model,
        max_tokens,
        temperature,
        isJSON,
    });
});
let count = 0;
export const createImage = (apiKey, prompt, { isVertical = false, model, }) => __awaiter(void 0, void 0, void 0, function* () {
    count++;
    const service = getAIService();
    return service.legacyCreateImage(apiKey, prompt, {
        isVertical,
        model,
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdGdwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNoYXRncHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLGlFQUFpRTtBQUNqRSxJQUFJLFNBQVMsR0FBcUIsSUFBSSxDQUFDO0FBRXZDLE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBa0I7SUFDOUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztBQUNyQixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVk7SUFDM0IsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsNkRBQTZELENBQUMsQ0FBQztLQUMvRTtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FDN0IsTUFBYyxFQUNkLFFBQXNDLEVBQ3RDLEVBQ0MsVUFBVSxFQUNWLEtBQUssRUFDTCxXQUFXLE1BS1IsRUFBRSxFQUNOLEVBQU8sRUFDTixFQUFFO0lBQ0gsTUFBTSxPQUFPLEdBQUcsWUFBWSxFQUFFLENBQUM7SUFDL0IsTUFBTSxPQUFPLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRTtRQUNwRCxVQUFVO1FBQ1YsS0FBSztRQUNMLFdBQVc7S0FDWCxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxDQUFBLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDMUIsTUFBYyxFQUNkLFFBQXNDLEVBQ3RDLEVBQ0MsS0FBSyxFQUNMLFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxNQU1ILEVBQUUsRUFDTCxFQUFFO0lBQ0gsTUFBTSxPQUFPLEdBQUcsWUFBWSxFQUFFLENBQUM7SUFDL0IsT0FBTyxPQUFPLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRTtRQUN2RCxLQUFLO1FBQ0wsVUFBVTtRQUNWLFdBQVc7UUFDWCxNQUFNO0tBQ04sQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFBLENBQUM7QUFFRixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDMUIsTUFBYyxFQUNkLE1BQWMsRUFDZCxFQUNDLFVBQVUsR0FBRyxLQUFLLEVBQ2xCLEtBQUssR0FJTCxFQUNBLEVBQUU7SUFDSCxLQUFLLEVBQUUsQ0FBQztJQUNSLE1BQU0sT0FBTyxHQUFHLFlBQVksRUFBRSxDQUFDO0lBQy9CLE9BQU8sT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7UUFDaEQsVUFBVTtRQUNWLEtBQUs7S0FDTCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtIH0gZnJvbSBcIm9wZW5haS9yZXNvdXJjZXNcIjtcbmltcG9ydCB7IEFJU2VydmljZSB9IGZyb20gXCJzcmMvc2VydmljZXMvYWlTZXJ2aWNlXCI7XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2UgPSB7XG5cdHJvbGU6IHN0cmluZztcblx0Y29udGVudDogc3RyaW5nO1xufTtcblxuLy8gR2xvYmFsIEFJIHNlcnZpY2UgaW5zdGFuY2UgLSB3aWxsIGJlIGluaXRpYWxpemVkIGJ5IHRoZSBwbHVnaW5cbmxldCBhaVNlcnZpY2U6IEFJU2VydmljZSB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QUlTZXJ2aWNlKHNlcnZpY2U6IEFJU2VydmljZSkge1xuXHRhaVNlcnZpY2UgPSBzZXJ2aWNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QUlTZXJ2aWNlKCk6IEFJU2VydmljZSB7XG5cdGlmICghYWlTZXJ2aWNlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQUkgc2VydmljZSBub3QgaW5pdGlhbGl6ZWQuIE1ha2Ugc3VyZSB0aGUgcGx1Z2luIGlzIGxvYWRlZC5cIik7XG5cdH1cblx0cmV0dXJuIGFpU2VydmljZTtcbn1cblxuZXhwb3J0IGNvbnN0IHN0cmVhbVJlc3BvbnNlID0gYXN5bmMgKFxuXHRhcGlLZXk6IHN0cmluZyxcblx0bWVzc2FnZXM6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtW10sXG5cdHtcblx0XHRtYXhfdG9rZW5zLFxuXHRcdG1vZGVsLFxuXHRcdHRlbXBlcmF0dXJlLFxuXHR9OiB7XG5cdFx0bWF4X3Rva2Vucz86IG51bWJlcjtcblx0XHRtb2RlbD86IHN0cmluZztcblx0XHR0ZW1wZXJhdHVyZT86IG51bWJlcjtcblx0fSA9IHt9LFxuXHRjYjogYW55XG4pID0+IHtcblx0Y29uc3Qgc2VydmljZSA9IGdldEFJU2VydmljZSgpO1xuXHRhd2FpdCBzZXJ2aWNlLmxlZ2FjeVN0cmVhbVJlc3BvbnNlKGFwaUtleSwgbWVzc2FnZXMsIHtcblx0XHRtYXhfdG9rZW5zLFxuXHRcdG1vZGVsLFxuXHRcdHRlbXBlcmF0dXJlLFxuXHR9LCBjYik7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UmVzcG9uc2UgPSBhc3luYyAoXG5cdGFwaUtleTogc3RyaW5nLFxuXHRtZXNzYWdlczogQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW1bXSxcblx0e1xuXHRcdG1vZGVsLFxuXHRcdG1heF90b2tlbnMsXG5cdFx0dGVtcGVyYXR1cmUsXG5cdFx0aXNKU09OLFxuXHR9OiB7XG5cdFx0bW9kZWw/OiBzdHJpbmc7XG5cdFx0bWF4X3Rva2Vucz86IG51bWJlcjtcblx0XHR0ZW1wZXJhdHVyZT86IG51bWJlcjtcblx0XHRpc0pTT04/OiBib29sZWFuO1xuXHR9ID0ge31cbikgPT4ge1xuXHRjb25zdCBzZXJ2aWNlID0gZ2V0QUlTZXJ2aWNlKCk7XG5cdHJldHVybiBzZXJ2aWNlLmxlZ2FjeUdlbmVyYXRlUmVzcG9uc2UoYXBpS2V5LCBtZXNzYWdlcywge1xuXHRcdG1vZGVsLFxuXHRcdG1heF90b2tlbnMsXG5cdFx0dGVtcGVyYXR1cmUsXG5cdFx0aXNKU09OLFxuXHR9KTtcbn07XG5cbmxldCBjb3VudCA9IDA7XG5leHBvcnQgY29uc3QgY3JlYXRlSW1hZ2UgPSBhc3luYyAoXG5cdGFwaUtleTogc3RyaW5nLFxuXHRwcm9tcHQ6IHN0cmluZyxcblx0e1xuXHRcdGlzVmVydGljYWwgPSBmYWxzZSxcblx0XHRtb2RlbCxcblx0fToge1xuXHRcdGlzVmVydGljYWw/OiBib29sZWFuO1xuXHRcdG1vZGVsPzogc3RyaW5nO1xuXHR9XG4pID0+IHtcblx0Y291bnQrKztcblx0Y29uc3Qgc2VydmljZSA9IGdldEFJU2VydmljZSgpO1xuXHRyZXR1cm4gc2VydmljZS5sZWdhY3lDcmVhdGVJbWFnZShhcGlLZXksIHByb21wdCwge1xuXHRcdGlzVmVydGljYWwsXG5cdFx0bW9kZWwsXG5cdH0pO1xufTtcbiJdfQ==